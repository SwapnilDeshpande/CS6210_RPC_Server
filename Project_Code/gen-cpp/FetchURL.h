/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FetchURL_H
#define FetchURL_H

#include <thrift/TDispatchProcessor.h>
#include "Project3_types.h"

namespace CS6210 {

class FetchURLIf {
 public:
  virtual ~FetchURLIf() {}
  virtual void ping() = 0;
  virtual void fetch(std::string& _return, const std::string& URL) = 0;
  virtual int32_t getMapSize() = 0;
};

class FetchURLIfFactory {
 public:
  typedef FetchURLIf Handler;

  virtual ~FetchURLIfFactory() {}

  virtual FetchURLIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FetchURLIf* /* handler */) = 0;
};

class FetchURLIfSingletonFactory : virtual public FetchURLIfFactory {
 public:
  FetchURLIfSingletonFactory(const boost::shared_ptr<FetchURLIf>& iface) : iface_(iface) {}
  virtual ~FetchURLIfSingletonFactory() {}

  virtual FetchURLIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FetchURLIf* /* handler */) {}

 protected:
  boost::shared_ptr<FetchURLIf> iface_;
};

class FetchURLNull : virtual public FetchURLIf {
 public:
  virtual ~FetchURLNull() {}
  void ping() {
    return;
  }
  void fetch(std::string& /* _return */, const std::string& /* URL */) {
    return;
  }
  int32_t getMapSize() {
    int32_t _return = 0;
    return _return;
  }
};


class FetchURL_ping_args {
 public:

  FetchURL_ping_args() {
  }

  virtual ~FetchURL_ping_args() throw() {}


  bool operator == (const FetchURL_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FetchURL_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchURL_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FetchURL_ping_pargs {
 public:


  virtual ~FetchURL_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FetchURL_ping_result {
 public:

  FetchURL_ping_result() {
  }

  virtual ~FetchURL_ping_result() throw() {}


  bool operator == (const FetchURL_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FetchURL_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchURL_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FetchURL_ping_presult {
 public:


  virtual ~FetchURL_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FetchURL_fetch_args__isset {
  _FetchURL_fetch_args__isset() : URL(false) {}
  bool URL;
} _FetchURL_fetch_args__isset;

class FetchURL_fetch_args {
 public:

  FetchURL_fetch_args() : URL() {
  }

  virtual ~FetchURL_fetch_args() throw() {}

  std::string URL;

  _FetchURL_fetch_args__isset __isset;

  void __set_URL(const std::string& val) {
    URL = val;
  }

  bool operator == (const FetchURL_fetch_args & rhs) const
  {
    if (!(URL == rhs.URL))
      return false;
    return true;
  }
  bool operator != (const FetchURL_fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchURL_fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FetchURL_fetch_pargs {
 public:


  virtual ~FetchURL_fetch_pargs() throw() {}

  const std::string* URL;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FetchURL_fetch_result__isset {
  _FetchURL_fetch_result__isset() : success(false) {}
  bool success;
} _FetchURL_fetch_result__isset;

class FetchURL_fetch_result {
 public:

  FetchURL_fetch_result() : success() {
  }

  virtual ~FetchURL_fetch_result() throw() {}

  std::string success;

  _FetchURL_fetch_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const FetchURL_fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FetchURL_fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchURL_fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FetchURL_fetch_presult__isset {
  _FetchURL_fetch_presult__isset() : success(false) {}
  bool success;
} _FetchURL_fetch_presult__isset;

class FetchURL_fetch_presult {
 public:


  virtual ~FetchURL_fetch_presult() throw() {}

  std::string* success;

  _FetchURL_fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FetchURL_getMapSize_args {
 public:

  FetchURL_getMapSize_args() {
  }

  virtual ~FetchURL_getMapSize_args() throw() {}


  bool operator == (const FetchURL_getMapSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FetchURL_getMapSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchURL_getMapSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FetchURL_getMapSize_pargs {
 public:


  virtual ~FetchURL_getMapSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FetchURL_getMapSize_result__isset {
  _FetchURL_getMapSize_result__isset() : success(false) {}
  bool success;
} _FetchURL_getMapSize_result__isset;

class FetchURL_getMapSize_result {
 public:

  FetchURL_getMapSize_result() : success(0) {
  }

  virtual ~FetchURL_getMapSize_result() throw() {}

  int32_t success;

  _FetchURL_getMapSize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const FetchURL_getMapSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FetchURL_getMapSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchURL_getMapSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FetchURL_getMapSize_presult__isset {
  _FetchURL_getMapSize_presult__isset() : success(false) {}
  bool success;
} _FetchURL_getMapSize_presult__isset;

class FetchURL_getMapSize_presult {
 public:


  virtual ~FetchURL_getMapSize_presult() throw() {}

  int32_t* success;

  _FetchURL_getMapSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FetchURLClient : virtual public FetchURLIf {
 public:
  FetchURLClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FetchURLClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void fetch(std::string& _return, const std::string& URL);
  void send_fetch(const std::string& URL);
  void recv_fetch(std::string& _return);
  int32_t getMapSize();
  void send_getMapSize();
  int32_t recv_getMapSize();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FetchURLProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FetchURLIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FetchURLProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMapSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FetchURLProcessor(boost::shared_ptr<FetchURLIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &FetchURLProcessor::process_ping;
    processMap_["fetch"] = &FetchURLProcessor::process_fetch;
    processMap_["getMapSize"] = &FetchURLProcessor::process_getMapSize;
  }

  virtual ~FetchURLProcessor() {}
};

class FetchURLProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FetchURLProcessorFactory(const ::boost::shared_ptr< FetchURLIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FetchURLIfFactory > handlerFactory_;
};

class FetchURLMultiface : virtual public FetchURLIf {
 public:
  FetchURLMultiface(std::vector<boost::shared_ptr<FetchURLIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FetchURLMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FetchURLIf> > ifaces_;
  FetchURLMultiface() {}
  void add(boost::shared_ptr<FetchURLIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void fetch(std::string& _return, const std::string& URL) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch(_return, URL);
    }
    ifaces_[i]->fetch(_return, URL);
    return;
  }

  int32_t getMapSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMapSize();
    }
    return ifaces_[i]->getMapSize();
  }

};

} // namespace

#endif
