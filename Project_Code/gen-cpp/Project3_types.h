/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Project3_TYPES_H
#define Project3_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace CS6210 {

typedef struct _URLMap__isset {
  _URLMap__isset() : URLBody(false) {}
  bool URLBody;
} _URLMap__isset;

class URLMap {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  URLMap() {
  }

  virtual ~URLMap() throw() {}

  std::map<std::string, std::string>  URLBody;

  _URLMap__isset __isset;

  void __set_URLBody(const std::map<std::string, std::string> & val) {
    URLBody = val;
  }

  bool operator == (const URLMap & rhs) const
  {
    if (!(URLBody == rhs.URLBody))
      return false;
    return true;
  }
  bool operator != (const URLMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const URLMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(URLMap &a, URLMap &b);

} // namespace

#endif
